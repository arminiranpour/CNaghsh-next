generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  createdAt           DateTime             @default(now())
  name                String?
  passwordHash        String?
  role                Role                 @default(USER)
  checkoutSessions    CheckoutSession[]
  emailLogs           EmailLog[]
  invoices            Invoice[]
  Job                 Job[]
  jobModerationEvents JobModerationEvent[] @relation("JobModerationAdmin")
  moderationEvents    ModerationEvent[]    @relation("ModerationActor")
  notifications       Notification[]
  payments            Payment[]
  subscriptions       Subscription[]
  moderatedProfiles   Profile[]            @relation("ProfileModerators")
  profile             Profile?
  entitlements        UserEntitlement[]
}

model Profile {
  id               String            @id @default(cuid())
  userId           String            @unique
  firstName        String?
  lastName         String?
  stageName        String?
  age              Int?
  phone            String?
  address          String?
  cityId           String?
  avatarUrl        String?
  bio              String?
  gallery          Json?
  skills           Json?
  socialLinks      Json?
  visibility       ProfileVisibility @default(PRIVATE)
  publishedAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  moderationStatus ModerationStatus  @default(PENDING)
  moderationNotes  String?
  moderatedBy      String?
  moderatedAt      DateTime?
  moderationEvents ModerationEvent[]
  moderator        User?             @relation("ProfileModerators", fields: [moderatedBy], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@index([visibility])
  @@index([moderationStatus])
  @@index([updatedAt])
}

model ModerationEvent {
  id        String           @id @default(cuid())
  profileId String
  actorId   String?
  action    ModerationAction
  reason    String?
  createdAt DateTime         @default(now())
  actor     User?            @relation("ModerationActor", fields: [actorId], references: [id])
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, createdAt])
}

model Product {
  id        String      @id @default(cuid())
  type      ProductType
  name      String
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  plans     Plan[]
  prices    Price[]
}

model Plan {
  id            String         @id @default(cuid())
  productId     String
  name          String
  cycle         PlanCycle
  limits        Json
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  product       Product        @relation(fields: [productId], references: [id])
  prices        Price[]
  subscriptions Subscription[]

  @@index([productId, active])
}

model Price {
  id        String            @id @default(cuid())
  currency  String            @default("IRR")
  amount    Int
  active    Boolean           @default(true)
  planId    String?
  productId String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  sessions  CheckoutSession[]
  plan      Plan?             @relation(fields: [planId], references: [id], onDelete: Restrict)
  product   Product?          @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([planId, active])
  @@index([productId, active])
}

model CheckoutSession {
  id                      String         @id @default(cuid())
  userId                  String
  provider                Provider
  priceId                 String
  status                  CheckoutStatus @default(STARTED)
  redirectUrl             String
  returnUrl               String
  providerInitPayload     Json
  providerCallbackPayload Json?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  price                   Price          @relation(fields: [priceId], references: [id])
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments                Payment[]

  @@index([userId, status])
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  planId            String
  status            SubscriptionStatus @default(active)
  startedAt         DateTime           @default(now())
  endsAt            DateTime
  renewalAt         DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  providerRef       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plan              Plan               @relation(fields: [planId], references: [id], onDelete: Restrict)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([status])
  @@index([endsAt])
}

model Payment {
  id                String              @id @default(cuid())
  userId            String
  checkoutSessionId String
  provider          Provider
  providerRef       String
  amount            Int
  currency          String              @default("IRR")
  status            PaymentStatus
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  invoice           Invoice?
  session           CheckoutSession     @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  webhookLogs       PaymentWebhookLog[]

  @@unique([provider, providerRef])
}

model PaymentWebhookLog {
  id         String    @id @default(cuid())
  provider   String
  eventType  String?
  externalId String
  signature  String?
  payload    Json
  receivedAt DateTime  @default(now())
  handledAt  DateTime?
  status     String?
  paymentId  String?
  payment    Payment?  @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@unique([provider, externalId])
  @@index([receivedAt])
  @@index([status])
}

model Invoice {
  id          String        @id @default(cuid())
  userId      String
  paymentId   String        @unique
  number      String        @unique @default(dbgenerated("concat('INV-', to_char(now(), 'YYYYMMDD'), '-', lpad(nextval(format('%I', 'Invoice_number_seq'))::text, 6, '0'))"))
  type        InvoiceType   @default(SALE)
  providerRef String?
  issuedAt    DateTime      @default(now())
  total       Int
  currency    String        @default("IRR")
  status      InvoiceStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  payment     Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([issuedAt])
}

model UserEntitlement {
  id               String         @id @default(cuid())
  userId           String
  key              EntitlementKey
  expiresAt        DateTime?
  remainingCredits Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// NOTE: Prisma does not support partial indexes.
  /// Application logic ensures at most one active CAN_PUBLISH_PROFILE entitlement per user.
  @@unique([userId, key, expiresAt])
  @@index([userId, key])
}

model Job {
  id               String               @id @default(cuid())
  userId           String
  title            String               @db.VarChar(140)
  description      String
  category         String               @db.VarChar(64)
  cityId           String?              @db.VarChar(64)
  payType          String?              @db.VarChar(32)
  payAmount        Int?
  currency         String?              @db.VarChar(3)
  remote           Boolean              @default(false)
  status           JobStatus            @default(DRAFT)
  moderation       JobModeration        @default(PENDING)
  featuredUntil    DateTime?
  views            Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderationEvents JobModerationEvent[]

  @@index([status, moderation, featuredUntil])
  @@index([category])
  @@index([cityId])
  @@index([title])
}

model JobModerationEvent {
  id        String         @id @default(cuid())
  jobId     String
  adminId   String
  action    JobAdminAction
  note      String?
  createdAt DateTime       @default(now())
  admin     User           @relation("JobModerationAdmin", fields: [adminId], references: [id])
  job       Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId, createdAt])
  @@index([adminId])
}

model Notification {
  id        String              @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  body      String
  payload   Json?
  channel   NotificationChannel @default(IN_APP)
  readAt    DateTime?
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, createdAt])
  @@index([userId, readAt])
}

model EmailLog {
  id        String   @id @default(cuid())
  userId    String
  to        String
  subject   String
  status    String
  error     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ProductType {
  SUBSCRIPTION
  JOB_POST
}

enum PlanCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum Provider {
  zarinpal
  idpay
  nextpay
}

enum SubscriptionStatus {
  active
  expired
  canceled
  renewing
}

enum CheckoutStatus {
  STARTED
  PENDING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

enum Role {
  USER
  ADMIN
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ModerationAction {
  APPROVE
  REJECT
  REVERT_TO_PENDING
  HIDE
  UNHIDE
  SYSTEM_AUTO_UNPUBLISH
}

enum InvoiceStatus {
  OPEN
  PAID
  VOID
}

enum InvoiceType {
  SALE
  REFUND
}

enum EntitlementKey {
  CAN_PUBLISH_PROFILE
  JOB_POST_CREDIT
}

enum NotificationChannel {
  IN_APP
  EMAIL
}

enum NotificationType {
  MODERATION_APPROVED
  MODERATION_REJECTED
  MODERATION_PENDING
  MODERATION_HIDDEN
  MODERATION_UNHIDDEN
  SYSTEM_AUTO_UNPUBLISH
  USER_PUBLISH_SUBMITTED
  USER_UNPUBLISHED
  ENTITLEMENT_EXPIRED
  ENTITLEMENT_RESTORED
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum JobModeration {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum JobAdminAction {
  APPROVE
  REJECT
  SUSPEND
  FEATURE
  UNFEATURE
  CLOSE
}
